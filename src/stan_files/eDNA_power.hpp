/*
    artemis is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    artemis is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with artemis.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_eDNA_power_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_eDNA_power");
    reader.add_event(88, 86, "end", "model_eDNA_power");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
ln_std_curve(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& conc,
                 const T1__& std_curve_alpha,
                 const T2__& std_curve_beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(add(multiply(std_curve_beta,stan::math::log(conc)),std_curve_alpha));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ln_std_curve_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& conc,
                 const T1__& std_curve_alpha,
                 const T2__& std_curve_beta, std::ostream* pstream__) const {
        return ln_std_curve(conc, std_curve_alpha, std_curve_beta, pstream__);
    }
};

#include <meta_header.hpp>
 class model_eDNA_power : public prob_grad {
private:
    int N;
    int n_vars;
    int n_rand_var;
    int n_rand_total;
    vector<int> rand_var_shared;
    matrix_d X;
    vector<vector<int> > rand_id;
    vector_d Cq;
    double upper_Cq;
    double std_curve_alpha;
    double std_curve_beta;
    matrix_d R;
    double s;
    matrix_d R_ast;
    matrix_d Q_ast;
    matrix_d R_ast_inverse;
public:
    model_eDNA_power(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_eDNA_power(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_eDNA_power_namespace::model_eDNA_power";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "n_vars", "int", context__.to_vec());
            n_vars = int(0);
            vals_i__ = context__.vals_i("n_vars");
            pos__ = 0;
            n_vars = vals_i__[pos__++];
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "n_rand_var", "int", context__.to_vec());
            n_rand_var = int(0);
            vals_i__ = context__.vals_i("n_rand_var");
            pos__ = 0;
            n_rand_var = vals_i__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "n_rand_total", "int", context__.to_vec());
            n_rand_total = int(0);
            vals_i__ = context__.vals_i("n_rand_total");
            pos__ = 0;
            n_rand_total = vals_i__[pos__++];
            current_statement_begin__ = 29;
            validate_non_negative_index("rand_var_shared", "n_rand_total", n_rand_total);
            context__.validate_dims("data initialization", "rand_var_shared", "int", context__.to_vec(n_rand_total));
            validate_non_negative_index("rand_var_shared", "n_rand_total", n_rand_total);
            rand_var_shared = std::vector<int>(n_rand_total,int(0));
            vals_i__ = context__.vals_i("rand_var_shared");
            pos__ = 0;
            size_t rand_var_shared_limit_0__ = n_rand_total;
            for (size_t i_0__ = 0; i_0__ < rand_var_shared_limit_0__; ++i_0__) {
                rand_var_shared[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "n_vars", n_vars);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,n_vars));
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "n_vars", n_vars);
            X = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(n_vars));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_m_mat_lim__ = N;
            size_t X_n_mat_lim__ = n_vars;
            for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                    X(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("rand_id", "N", N);
            validate_non_negative_index("rand_id", "n_rand_var", n_rand_var);
            context__.validate_dims("data initialization", "rand_id", "int", context__.to_vec(N,n_rand_var));
            validate_non_negative_index("rand_id", "N", N);
            validate_non_negative_index("rand_id", "n_rand_var", n_rand_var);
            rand_id = std::vector<std::vector<int> >(N,std::vector<int>(n_rand_var,int(0)));
            vals_i__ = context__.vals_i("rand_id");
            pos__ = 0;
            size_t rand_id_limit_1__ = n_rand_var;
            for (size_t i_1__ = 0; i_1__ < rand_id_limit_1__; ++i_1__) {
                size_t rand_id_limit_0__ = N;
                for (size_t i_0__ = 0; i_0__ < rand_id_limit_0__; ++i_0__) {
                    rand_id[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("Cq", "N", N);
            context__.validate_dims("data initialization", "Cq", "vector_d", context__.to_vec(N));
            validate_non_negative_index("Cq", "N", N);
            Cq = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("Cq");
            pos__ = 0;
            size_t Cq_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < Cq_i_vec_lim__; ++i_vec__) {
                Cq[i_vec__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 25;
            current_statement_begin__ = 26;
            current_statement_begin__ = 27;
            current_statement_begin__ = 28;
            current_statement_begin__ = 29;
            for (int k0__ = 0; k0__ < n_rand_total; ++k0__) {
                check_less_or_equal(function__,"rand_var_shared[k0__]",rand_var_shared[k0__],n_rand_var);
            }
            current_statement_begin__ = 30;
            current_statement_begin__ = 31;
            current_statement_begin__ = 32;
            // initialize data variables
            current_statement_begin__ = 37;
            upper_Cq = double(0);
            stan::math::fill(upper_Cq,DUMMY_VAR__);
            stan::math::assign(upper_Cq,40.0);
            current_statement_begin__ = 38;
            std_curve_alpha = double(0);
            stan::math::fill(std_curve_alpha,DUMMY_VAR__);
            stan::math::assign(std_curve_alpha,21.167769);
            current_statement_begin__ = 39;
            std_curve_beta = double(0);
            stan::math::fill(std_curve_beta,DUMMY_VAR__);
            stan::math::assign(std_curve_beta,-(1.5286830499999999));
            current_statement_begin__ = 42;
            validate_non_negative_index("R", "n_vars", n_vars);
            validate_non_negative_index("R", "n_vars", n_vars);
            R = matrix_d(static_cast<Eigen::VectorXd::Index>(n_vars),static_cast<Eigen::VectorXd::Index>(n_vars));
            stan::math::fill(R,DUMMY_VAR__);
            stan::math::assign(R,qr_thin_R(X));
            current_statement_begin__ = 43;
            s = double(0);
            stan::math::fill(s,DUMMY_VAR__);
            stan::math::assign(s,stan::math::sqrt((N - 1.0)));
            current_statement_begin__ = 44;
            validate_non_negative_index("R_ast", "n_vars", n_vars);
            validate_non_negative_index("R_ast", "n_vars", n_vars);
            R_ast = matrix_d(static_cast<Eigen::VectorXd::Index>(n_vars),static_cast<Eigen::VectorXd::Index>(n_vars));
            stan::math::fill(R_ast,DUMMY_VAR__);
            stan::math::assign(R_ast,divide(R,s));
            current_statement_begin__ = 45;
            validate_non_negative_index("Q_ast", "N", N);
            validate_non_negative_index("Q_ast", "n_vars", n_vars);
            Q_ast = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(n_vars));
            stan::math::fill(Q_ast,DUMMY_VAR__);
            stan::math::assign(Q_ast,multiply(qr_thin_Q(X),s));
            current_statement_begin__ = 46;
            validate_non_negative_index("R_ast_inverse", "n_vars", n_vars);
            validate_non_negative_index("R_ast_inverse", "n_vars", n_vars);
            R_ast_inverse = matrix_d(static_cast<Eigen::VectorXd::Index>(n_vars),static_cast<Eigen::VectorXd::Index>(n_vars));
            stan::math::fill(R_ast_inverse,DUMMY_VAR__);
            stan::math::assign(R_ast_inverse,inverse(R_ast));


            // validate transformed data
            current_statement_begin__ = 37;
            current_statement_begin__ = 38;
            current_statement_begin__ = 39;
            current_statement_begin__ = 42;
            current_statement_begin__ = 43;
            current_statement_begin__ = 44;
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 50;
            validate_non_negative_index("thetas", "n_vars", n_vars);
            num_params_r__ += n_vars;
            current_statement_begin__ = 51;
            validate_non_negative_index("rand_betas_raw", "n_rand_total", n_rand_total);
            num_params_r__ += n_rand_total;
            current_statement_begin__ = 52;
            ++num_params_r__;
            current_statement_begin__ = 53;
            validate_non_negative_index("rand_sigma", "n_rand_var", n_rand_var);
            num_params_r__ += n_rand_var;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_eDNA_power() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("thetas")))
            throw std::runtime_error("variable thetas missing");
        vals_r__ = context__.vals_r("thetas");
        pos__ = 0U;
        validate_non_negative_index("thetas", "n_vars", n_vars);
        context__.validate_dims("initialization", "thetas", "vector_d", context__.to_vec(n_vars));
        vector_d thetas(static_cast<Eigen::VectorXd::Index>(n_vars));
        for (int j1__ = 0U; j1__ < n_vars; ++j1__)
            thetas(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(thetas);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable thetas: ") + e.what());
        }

        if (!(context__.contains_r("rand_betas_raw")))
            throw std::runtime_error("variable rand_betas_raw missing");
        vals_r__ = context__.vals_r("rand_betas_raw");
        pos__ = 0U;
        validate_non_negative_index("rand_betas_raw", "n_rand_total", n_rand_total);
        context__.validate_dims("initialization", "rand_betas_raw", "vector_d", context__.to_vec(n_rand_total));
        vector_d rand_betas_raw(static_cast<Eigen::VectorXd::Index>(n_rand_total));
        for (int j1__ = 0U; j1__ < n_rand_total; ++j1__)
            rand_betas_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(rand_betas_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rand_betas_raw: ") + e.what());
        }

        if (!(context__.contains_r("sigma_Cq")))
            throw std::runtime_error("variable sigma_Cq missing");
        vals_r__ = context__.vals_r("sigma_Cq");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_Cq", "double", context__.to_vec());
        double sigma_Cq(0);
        sigma_Cq = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_Cq);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_Cq: ") + e.what());
        }

        if (!(context__.contains_r("rand_sigma")))
            throw std::runtime_error("variable rand_sigma missing");
        vals_r__ = context__.vals_r("rand_sigma");
        pos__ = 0U;
        validate_non_negative_index("rand_sigma", "n_rand_var", n_rand_var);
        context__.validate_dims("initialization", "rand_sigma", "vector_d", context__.to_vec(n_rand_var));
        vector_d rand_sigma(static_cast<Eigen::VectorXd::Index>(n_rand_var));
        for (int j1__ = 0U; j1__ < n_rand_var; ++j1__)
            rand_sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,rand_sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rand_sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  thetas;
            (void) thetas;  // dummy to suppress unused var warning
            if (jacobian__)
                thetas = in__.vector_constrain(n_vars,lp__);
            else
                thetas = in__.vector_constrain(n_vars);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rand_betas_raw;
            (void) rand_betas_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                rand_betas_raw = in__.vector_constrain(n_rand_total,lp__);
            else
                rand_betas_raw = in__.vector_constrain(n_rand_total);

            local_scalar_t__ sigma_Cq;
            (void) sigma_Cq;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_Cq = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_Cq = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rand_sigma;
            (void) rand_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                rand_sigma = in__.vector_lb_constrain(0,n_rand_var,lp__);
            else
                rand_sigma = in__.vector_lb_constrain(0,n_rand_var);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 59;
            validate_non_negative_index("ln_conc_hat", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ln_conc_hat(static_cast<Eigen::VectorXd::Index>(N));
            (void) ln_conc_hat;  // dummy to suppress unused var warning

            stan::math::initialize(ln_conc_hat, DUMMY_VAR__);
            stan::math::fill(ln_conc_hat,DUMMY_VAR__);
            stan::math::assign(ln_conc_hat,multiply(Q_ast,thetas));
            current_statement_begin__ = 60;
            validate_non_negative_index("Cq_hat", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Cq_hat(static_cast<Eigen::VectorXd::Index>(N));
            (void) Cq_hat;  // dummy to suppress unused var warning

            stan::math::initialize(Cq_hat, DUMMY_VAR__);
            stan::math::fill(Cq_hat,DUMMY_VAR__);


            current_statement_begin__ = 63;
            for (int i = 1; i <= n_rand_var; ++i) {
                current_statement_begin__ = 64;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 65;
                    stan::model::assign(ln_conc_hat, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (stan::model::rvalue(ln_conc_hat, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "ln_conc_hat") + (get_base1(rand_betas_raw,get_base1(get_base1(rand_id,n,"rand_id",1),i,"rand_id",2),"rand_betas_raw",1) * get_base1(rand_sigma,i,"rand_sigma",1))), 
                                "assigning variable ln_conc_hat");
                }
            }
            current_statement_begin__ = 68;
            lp_accum__.add(normal_log<propto__>(thetas, 0, 1));
            current_statement_begin__ = 69;
            lp_accum__.add(normal_log<propto__>(rand_betas_raw, 0, 1));
            current_statement_begin__ = 70;
            lp_accum__.add(normal_log<propto__>(sigma_Cq, 0, 1));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log<propto__>(rand_sigma, 0, 0.10000000000000001));
            current_statement_begin__ = 73;
            stan::math::assign(Cq_hat, ln_std_curve(stan::math::exp(ln_conc_hat),std_curve_alpha,std_curve_beta, pstream__));
            current_statement_begin__ = 75;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 76;
                if (as_bool(logical_lt(get_base1(Cq,n,"Cq",1),40))) {

                    current_statement_begin__ = 77;
                    lp_accum__.add(normal_log<propto__>(get_base1(Cq,n,"Cq",1), get_base1(Cq_hat,n,"Cq_hat",1), sigma_Cq));
                } else {

                    current_statement_begin__ = 79;
                    lp_accum__.add(normal_ccdf_log(upper_Cq,get_base1(Cq_hat,n,"Cq_hat",1),sigma_Cq));
                }
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("thetas");
        names__.push_back("rand_betas_raw");
        names__.push_back("sigma_Cq");
        names__.push_back("rand_sigma");
        names__.push_back("betas");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_vars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_rand_total);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_rand_var);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_vars);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_eDNA_power_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d thetas = in__.vector_constrain(n_vars);
        vector_d rand_betas_raw = in__.vector_constrain(n_rand_total);
        double sigma_Cq = in__.scalar_lb_constrain(0);
        vector_d rand_sigma = in__.vector_lb_constrain(0,n_rand_var);
            for (int k_0__ = 0; k_0__ < n_vars; ++k_0__) {
            vars__.push_back(thetas[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_rand_total; ++k_0__) {
            vars__.push_back(rand_betas_raw[k_0__]);
            }
        vars__.push_back(sigma_Cq);
            for (int k_0__ = 0; k_0__ < n_rand_var; ++k_0__) {
            vars__.push_back(rand_sigma[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 85;
            validate_non_negative_index("betas", "n_vars", n_vars);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  betas(static_cast<Eigen::VectorXd::Index>(n_vars));
            (void) betas;  // dummy to suppress unused var warning

            stan::math::initialize(betas, DUMMY_VAR__);
            stan::math::fill(betas,DUMMY_VAR__);
            stan::math::assign(betas,multiply(R_ast_inverse,thetas));



            // validate generated quantities
            current_statement_begin__ = 85;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < n_vars; ++k_0__) {
            vars__.push_back(betas[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_eDNA_power";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_vars; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "thetas" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_rand_total; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rand_betas_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_Cq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_rand_var; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rand_sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_vars; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betas" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_vars; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "thetas" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_rand_total; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rand_betas_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_Cq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_rand_var; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rand_sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_vars; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betas" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_eDNA_power_namespace::model_eDNA_power stan_model;


#endif
